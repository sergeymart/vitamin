{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


##### Core constants #####
let PRECISION = 1000000000000000000 # 1e18
let DURATION = 60 * 60 * 24 # 1 day
let DECIMALS = 100000000 # 1e8

##### Key constants #####

# Global staking
let k_lastCompoundTime = "k_lastCompoundTime"
let k_periodFinish = "k_periodFinish"
let k_lastRate = "k_lastRate"
let k_growthRate = "k_growthRate"
let k_balance = "k_balance"
let k_leaseId = "k_leaseId"

# Initialization status
let k_initialized = "k_initialized"

# Contract settings
let k_adminPublicKey = "k_adminPublicKey" 
let k_adminAddress = "k_adminAddress"  
let k_minerAddress = "k_minerAddress"
let k_stkWavesAsset = "k_stkWavesAssetId"

##### Common funcs #####
func divd(_x: Int, _y: Int) = fraction(_x, DECIMALS, _y, HALFEVEN)
func muld(_x: Int, _y: Int) = fraction(_x, _y, DECIMALS, HALFEVEN)
func divp(_x: Int, _y: Int) = fraction(_x, PRECISION, _y, HALFEVEN)
func mulp(_x: Int, _y: Int) = fraction(_x, _y, PRECISION, HALFEVEN)
func abs(_x: Int) = if (_x > 0) then _x else -_x
func minv(_x: Int, _y: Int) = if (_x > _y) then _y else _x
func toCompositeKey(_key: String, _address: String) = _key + "_" + _address

##### Address constants #####
func adminAddress() = addressFromString(this.getStringValue(k_adminAddress))
func adminPublicKey() = fromBase58String(this.getStringValue(k_adminPublicKey))
func minerAddress() = addressFromString(this.getStringValue(k_minerAddress)).valueOrErrorMessage("Invalid miner address is not set")
func stkWavesAsset() = this.getStringValue(k_stkWavesAsset).fromBase58String()

##### Accessor functions #####
func initialized() = this.getBoolean(k_initialized).valueOrElse(false)

func int(k: String) = this.getInteger(k).valueOrErrorMessage("No value for " + k)
func int0(k: String) = this.getInteger(k).valueOrElse(0)

func lastCompoundTime() = int0(k_lastCompoundTime)
func growthRate() = int0(k_growthRate)
func balance() = int0(k_balance)
func lastRate() = int(k_lastRate)
func periodFinish() = int0(k_periodFinish)

func adminPublicKeyOrUnit() = match this.getString(k_adminPublicKey) {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}

func mustAdmin(i: Invocation) = {
  let pd = "permission denied".throw()

  match adminPublicKeyOrUnit() {
    case pk: ByteVector => i.callerPublicKey == pk || pd
    case _: Unit => i.caller == this || pd
  }
}

##### View functions #####
func currentTimestampSec() = lastBlock.timestamp / 1000

func dt() = {
  if (currentTimestampSec() < periodFinish()) then {
    currentTimestampSec() - lastCompoundTime()
  } else {
    DURATION
  }
}

##### Update functions #####
func cancelLease() = {
  match getBinary(k_leaseId) {
    case id: ByteVector => [LeaseCancel(id), DeleteEntry(k_leaseId)]
    case _: Unit => []
  }
}

func updateBalance(_amount: Int) = {
  [
    IntegerEntry(k_balance, _amount)
  ]
}

func updateTime(
    _lastCompoundTime: Int,
    _periodFinish: Int
  ) = {
    [
      IntegerEntry(k_lastCompoundTime, _lastCompoundTime),
      IntegerEntry(k_periodFinish, _periodFinish)
    ]
}

func updateRate(
  _rate: Int,
  _growthRate: Int
) = {
  [
    IntegerEntry(k_lastRate, _rate),
    IntegerEntry(k_growthRate, _growthRate)
  ]
}

func updateLease(_amount: Int) = {
  if (_amount > 0) then {
    let newLease = Lease(minerAddress(), _amount)
    let newLeaseId = calculateLeaseId(newLease)
    [
      newLease,
      BinaryEntry(k_leaseId, newLeaseId)
    ]
  } else []
}

func lease(_amount: Int) = {
  if (_amount == 0) then [] else

  let newAmount = balance() + _amount

  cancelLease()
  ++
  updateLease(newAmount)
  ++
  updateBalance(newAmount)
}

func issueStkWaves(_amount: Int) = {
  [
    Reissue(stkWavesAsset(), _amount, true)
  ]
}

func burnStkWaves(_amount: Int) = {
  [
    Burn(stkWavesAsset(), _amount)
  ]
}

func sendStkWaves(
  _recipient: Address,
  _amount: Int
) = {
  [
    ScriptTransfer(_recipient, _amount, stkWavesAsset())
  ]
}

func sendWaves(
  _recipient: Address,
  _amount: Int
) = {
  [
    ScriptTransfer(_recipient, _amount, unit)
  ]
}

func stkWavesQuantity() = {
  match assetInfo(stkWavesAsset()) {
    case asset: Asset => asset.quantity
    case _ => throw("Can't find asset")
  }
}

func getExcessWaves() = {
  wavesBalance(minerAddress()).regular
}

func withdraw() = {
  strict result = invoke(minerAddress(), "withdraw", [], [])
  result
}

func currentRate() = {
  lastRate() + growthRate() * dt()
}

##### Callable functions #####
@Callable(i)
func init(
  _minerAddress: String
) = {
  strict check = mustAdmin(i)
  if (initialized()) then {
    throw("Already initialized")
  } else {
    let stkWaves = Issue("stkWaves", "", 0, 8, true, unit, 0)
    let stkWavesAssetId = stkWaves.calculateAssetId()
    [
      BooleanEntry(k_initialized, true),
      StringEntry(k_stkWavesAsset,  stkWavesAssetId.toBase58String()),
      StringEntry(k_minerAddress,  _minerAddress),
      IntegerEntry(k_lastRate, PRECISION),
      stkWaves
    ]
  }
}

@Callable(i)
func compound() = {
  if (size(i.payments) != 0) then throw("No payments allowed") else

  strict excessWaves = getExcessWaves()

  if (excessWaves < 1 * DECIMALS) then {
    []
  } else {
    strict doWithdraw = withdraw()

    let newRate = currentRate()

    let timestamp = currentTimestampSec()
    let newGrowthRate = if (timestamp > periodFinish()) then {
      divp(excessWaves, DECIMALS) / DURATION
    } else {
      let remainingTime = periodFinish() - timestamp
      let leftover = growthRate() * remainingTime
      divp(excessWaves + leftover, DECIMALS) / DURATION
    }

    lease(excessWaves)
    ++
    updateRate(newRate, newGrowthRate)
    ++
    updateTime(timestamp, timestamp + DURATION)
  }
}

@Callable(i)
func stake() = {
  strict doCompound = invoke(this, "compound", [], [])

  let rate = currentRate()

  let payment = i.payments[0]
  if (payment.assetId != unit) then throw("Only WAVES supported") else
  if (size(i.payments) != 1) then throw("Wrong payments amount") else

  let toReissue = divp(payment.amount, rate)

  lease(payment.amount)
  ++
  issueStkWaves(toReissue)
  ++
  sendStkWaves(i.caller, toReissue)
}

@Callable(i)
func unstake() = {
  strict doCompound = invoke(this, "compound", [], [])

  let rate = currentRate()

  let payment = i.payments[0]
  if (payment.assetId != stkWavesAsset()) then throw("Only stkWaves supported") else
  if (size(i.payments) != 1) then throw("Wrong payments amount") else

  let transferAmount = mulp(payment.amount, rate)

  lease(-transferAmount)
  ++
  burnStkWaves(payment.amount)
  ++
  sendWaves(i.caller, transferAmount) 
}


@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
        