{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let precision = 1000000000000000000

func keyManagerPublicKey() = getString("managerPublicKey")

func managerPublicKeyOrUnit() = match keyManagerPublicKey() {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}

func mustManager(i: Invocation) = {
  let pd = "permission denied".throw()

  match managerPublicKeyOrUnit() {
    case pk: ByteVector => i.callerPublicKey == pk || pd
    case _: Unit => i.caller == this || pd
  }
}

func mustNotInited() = {
  match getBoolean("inited") {
    case inited: Boolean => inited == false || throw("Already inited")
    case _: Unit => false
  }
}

func cancelLease() = {
  match getBinary("leaseId") {
    case id: ByteVector => [LeaseCancel(id), DeleteEntry("leaseId")]
    case _: Unit => []
  }
}

func setLeasedAmount(amount: Int) = {
  IntegerEntry("leasedAmount", amount)
}

func lease(amount: Int) = {
  if (amount == 0) then [] else

  let leaserAddress = Address(fromBase58String(getStringValue("leaserAddress")))
  let currentAmount = getIntegerValue("leasedAmount")
  let newAmount = currentAmount + amount

  let leaseActions = if (newAmount > 0) then {
    let newLease = Lease(leaserAddress, newAmount)
    let newLeaseId = calculateLeaseId(newLease)
    [newLease, BinaryEntry("leaseId", newLeaseId)]
  } else []

  cancelLease() ++ leaseActions :+ setLeasedAmount(newAmount)
}

func issueSWaves(amount: Int) = {
  let sWavesAssetId = getStringValue("sWavesAssetId").fromBase58String()
  Reissue(sWavesAssetId, amount, true)
}

func burnSWaves(amount: Int) = {
  let sWavesAssetId = getStringValue("sWavesAssetId").fromBase58String()
  Burn(sWavesAssetId, amount)
}

func sendSWaves(recipient: Address, amount: Int) = {
  let sWavesAssetId = getStringValue("sWavesAssetId").fromBase58String()
  ScriptTransfer(recipient, amount, sWavesAssetId)
}

func sendWaves(recipient: Address, amount: Int) = {
  ScriptTransfer(recipient, amount, unit)
}

func sWavesQuantity() = {
  let assetId = getStringValue("sWavesAssetId").fromBase58String()
  match assetInfo(assetId) {
    case asset: Asset => asset.quantity
    case _ => throw("Can't find asset")
  }
}

func getMinerBalance() = {
  let leaserAddress = Address(fromBase58String(getStringValue("leaserAddress")))
  wavesBalance(leaserAddress).regular
}

func calculateRatio() = {
  let leasedAmount = getIntegerValue("leasedAmount")
  let sWavesTotal = sWavesQuantity()
  let minerBalance = getMinerBalance()
  let wavesTotal = leasedAmount + minerBalance
  fraction(wavesTotal, precision, sWavesTotal)
}

func withdraw(amount: Int) = {
  let minerAddress = Address(fromBase58String(getStringValue("leaserAddress")))
  strict result = invoke(minerAddress, "withdraw", [amount], [])
  result
}

@Callable(i)
func init(leaserAddress: String) = {
  strict checks = [
    mustManager(i),
    mustNotInited()
  ]

  let sWaves = Issue("sWaves", "", 0, 8, true, unit, 0)
  let sWavesAssetId = sWaves.calculateAssetId()
  [
    BooleanEntry("inited", true),
    StringEntry("sWavesAssetId",  sWavesAssetId.toBase58String()),
    StringEntry("leaserAddress",  leaserAddress),
    IntegerEntry("ratio", precision),
    IntegerEntry("leasedAmount", 0),
    sWaves
  ]
}

@Callable(i)
func stake() = {
  let payment = i.payments[0]
  if (payment.assetId != unit) then throw("Only WAVES supported") else
  if (size(i.payments) != 1) then throw("Wrong payments amount") else

  let ratio = getIntegerValue("ratio")
  let toReissue = fraction(payment.amount, precision, ratio)

  lease(payment.amount) :+ issueSWaves(toReissue) :+ sendSWaves(i.caller, toReissue)
}

@Callable(i)
func unstake() = {
  let payment = i.payments[0]
  let sWavesAssetId = fromBase58String(getStringValue("sWavesAssetId"))
  if (payment.assetId != sWavesAssetId) then throw("Only sWAVES supported") else
  if (size(i.payments) != 1) then throw("Wrong payments amount") else

  let ratio = getIntegerValue("ratio")
  let transferAmount = fraction(payment.amount, ratio, precision)

  let minerBalance = getMinerBalance()

  let unleaseAmount = if (transferAmount > minerBalance) then transferAmount - minerBalance else 0
  let withdrawAmount = if (transferAmount > minerBalance) then minerBalance else minerBalance - transferAmount

  strict withdrawResult = withdraw(withdrawAmount)

  lease(-unleaseAmount) :+ burnSWaves(payment.amount) :+ sendWaves(i.caller, transferAmount) 
}

@Callable(i)
func compound() = {
  let ratio = calculateRatio()
  [
    IntegerEntry("ratio", ratio)
  ]
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

